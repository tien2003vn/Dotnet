// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(SocialMediaContext))]
    [Migration("20241204102804_deleteGroupChat")]
    partial class deleteGroupChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.ChatInMessage", b =>
                {
                    b.Property<int?>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("chat_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("ChatId"));

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_created");

                    b.Property<int>("FromUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_user");

                    b.Property<bool?>("IsNoti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_notification");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<bool?>("IsRecall")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_recall");

                    b.Property<int?>("MediaId")
                        .HasColumnType("int(1)")
                        .HasColumnName("media_id");

                    b.Property<int>("MessagesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("messages_id");

                    b.HasKey("ChatId")
                        .HasName("PRIMARY");

                    b.HasIndex("MediaId");

                    b.HasIndex(new[] { "FromUser" }, "from_user");

                    b.HasIndex(new[] { "MessagesId" }, "messages_id");

                    b.ToTable("chat_in_message", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("comment_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("ChildOf")
                        .HasColumnType("int(11)")
                        .HasColumnName("child_of");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_updated")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("PostId")
                        .HasColumnType("int(11)")
                        .HasColumnName("post_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildOf" }, "fk_child_of");

                    b.HasIndex(new[] { "PostId" }, "fk_comments_post_id");

                    b.HasIndex(new[] { "UserId" }, "fk_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Backend.Models.GenderType", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("gender_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender_name");

                    b.HasKey("GenderId");

                    b.ToTable("gender_type", (string)null);
                });

            modelBuilder.Entity("Backend.Models.HistorySearch", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("history_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime?>("DateSearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_search")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_user");

                    b.Property<int?>("OtherUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("other_user");

                    b.HasKey("HistoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FromUserId" }, "from_user")
                        .HasDatabaseName("from_user1");

                    b.HasIndex(new[] { "OtherUserId" }, "other_user");

                    b.ToTable("history_search", (string)null);
                });

            modelBuilder.Entity("Backend.Models.MainTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("topic_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("color");

                    b.Property<string>("TopicName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("topic_name");

                    b.HasKey("TopicId")
                        .HasName("PRIMARY");

                    b.ToTable("main_topic", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("media_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("hash_code");

                    b.Property<int?>("MediaType")
                        .HasColumnType("int(11)")
                        .HasColumnName("media_type");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("src");

                    b.HasKey("MediaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MediaType" }, "fk_type_media");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.Property<int>("MessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("messages_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessagesId"));

                    b.Property<int?>("MainTopic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("main_topic")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("NickName1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nickname_1");

                    b.Property<string>("NickName2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nickname_2");

                    b.Property<int>("User1")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_1");

                    b.Property<int>("User2")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_2");

                    b.HasKey("MessagesId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MainTopic" }, "fk_topic_main");

                    b.HasIndex(new[] { "User1" }, "user_1");

                    b.HasIndex(new[] { "User2" }, "user_2");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("post_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_updated")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("DateUpdated"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsCoverPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_cover_photo");

                    b.Property<bool>("IsPictureProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_profile_picture");

                    b.Property<bool?>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_visible");

                    b.Property<int?>("PrivacyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("privacy_id");

                    b.HasKey("PostId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_posts_group_id");

                    b.HasIndex(new[] { "PrivacyId" }, "fk_posts_privacy_id");

                    b.HasIndex(new[] { "CreatedByUserId" }, "idx_created_by_user_id_posts");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Backend.Models.PostNotification", b =>
                {
                    b.Property<int>("PostNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("post_notification_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PostNotificationId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_user_id");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<int>("PostId")
                        .HasColumnType("int(11)")
                        .HasColumnName("post_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("type_id");

                    b.HasKey("PostNotificationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FromUserId" }, "fk_post_notifications_from_user_id");

                    b.HasIndex(new[] { "PostId" }, "fk_post_notifications_post_id");

                    b.HasIndex(new[] { "TypeId" }, "fk_post_notifications_type");

                    b.ToTable("post_notifications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.PrivacySetting", b =>
                {
                    b.Property<int>("PrivacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("privacy_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PrivacyId"));

                    b.Property<string>("PrivacyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("privacy_name");

                    b.HasKey("PrivacyId")
                        .HasName("PRIMARY");

                    b.ToTable("privacy_settings", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ReactsComment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("comment_id");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommentId" }, "fk_reacts_comment_comment_id");

                    b.ToTable("reacts_comment", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ReactsPost", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int(11)")
                        .HasColumnName("post_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "PostId" }, "fk_reacts_post_post_id");

                    b.HasIndex(new[] { "UserId" }, "fk_reacts_post_user_id");

                    b.ToTable("reacts_post", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ReadMessage", b =>
                {
                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("MessagesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("messages_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "MessagesId" }, "messages_id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("read_message", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Relationship", b =>
                {
                    b.Property<int>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("relationship_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RelationshipId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_user_id");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("to_user_id");

                    b.Property<int?>("TypeRelationship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("type_relationship")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("RelationshipId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ToUserId" }, "fk_relationship_to_user_id");

                    b.HasIndex(new[] { "TypeRelationship" }, "fk_type_relationship");

                    b.HasIndex(new[] { "FromUserId", "ToUserId" }, "from_user_id")
                        .IsUnique();

                    b.ToTable("relationship", (string)null);
                });

            modelBuilder.Entity("Backend.Models.RequestNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("notification_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("from_user_id");

                    b.Property<bool?>("IsAccept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accept")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("to_user_id");

                    b.HasKey("NotificationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FromUserId" }, "fk_request_notifications_from_user_id");

                    b.HasIndex(new[] { "ToUserId" }, "fk_request_notifications_to_user_id");

                    b.ToTable("request_notifications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SharePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int(11)")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("DateShare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_share")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("UserId", "PostId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PostId" }, "fk_share_posts_post_id");

                    b.ToTable("share_posts", (string)null);
                });

            modelBuilder.Entity("Backend.Models.TypeMedia", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("type_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.ToTable("type_media", (string)null);
                });

            modelBuilder.Entity("Backend.Models.TypePostNotification", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("type_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.ToTable("type_post_notifications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.TypeRelationship", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("type_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.ToTable("type_relationship", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_updated")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("DateUpdated"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int(1)")
                        .HasColumnName("gender_id");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_online");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex("GenderId");

                    b.HasIndex(new[] { "Email" }, "idx_username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Backend.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("group_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("CoverPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cover_photo");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_updated")
                        .HasDefaultValueSql("current_timestamp()");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("DateUpdated"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("group_name");

                    b.Property<int?>("PrivacyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("privacy_id");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_picture");

                    b.HasKey("GroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PrivacyId" }, "fk_user_groups_privacy_id");

                    b.HasIndex(new[] { "CreatedByUserId" }, "idx_created_by_user_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("Backend.Models.UserInGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("DateIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_in")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("UserId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "fk_user_in_group_group_id");

                    b.ToTable("user_in_group", (string)null);
                });

            modelBuilder.Entity("media_message", b =>
                {
                    b.Property<int>("media_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("message_id")
                        .HasColumnType("int(11)");

                    b.HasKey("media_id", "message_id");

                    b.HasIndex("message_id");

                    b.ToTable("media_message");
                });

            modelBuilder.Entity("post_media", b =>
                {
                    b.Property<int>("media_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("post_id")
                        .HasColumnType("int(11)");

                    b.HasKey("media_id", "post_id");

                    b.HasIndex("post_id");

                    b.ToTable("post_media");
                });

            modelBuilder.Entity("Backend.Models.ChatInMessage", b =>
                {
                    b.HasOne("Backend.Models.User", "FromUserNavigation")
                        .WithMany("ChatInMessages")
                        .HasForeignKey("FromUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_in_message_ibfk_1");

                    b.HasOne("Backend.Models.Media", "Media")
                        .WithMany("ChatInMessage")
                        .HasForeignKey("MediaId")
                        .HasConstraintName("fk_media_chat");

                    b.HasOne("Backend.Models.Message", "Messages")
                        .WithMany("ChatInMessages")
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_in_message_ibfk_2");

                    b.Navigation("FromUserNavigation");

                    b.Navigation("Media");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Backend.Models.Comment", b =>
                {
                    b.HasOne("Backend.Models.Comment", "ChildOfNavigation")
                        .WithMany("InverseChildOfNavigation")
                        .HasForeignKey("ChildOf")
                        .HasConstraintName("fk_child_of");

                    b.HasOne("Backend.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_comments_post_id");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_user_id");

                    b.Navigation("ChildOfNavigation");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.HistorySearch", b =>
                {
                    b.HasOne("Backend.Models.User", "FromUser")
                        .WithMany("HistorySearchFromUserNavigations")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("history_search_ibfk_2");

                    b.HasOne("Backend.Models.User", "OtherUser")
                        .WithMany("HistorySearchOtherUserNavigations")
                        .HasForeignKey("OtherUserId")
                        .HasConstraintName("history_search_ibfk_1");

                    b.Navigation("FromUser");

                    b.Navigation("OtherUser");
                });

            modelBuilder.Entity("Backend.Models.Media", b =>
                {
                    b.HasOne("Backend.Models.TypeMedia", "MediaTypeNavigation")
                        .WithMany("Media")
                        .HasForeignKey("MediaType")
                        .HasConstraintName("fk_type_media");

                    b.Navigation("MediaTypeNavigation");
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.HasOne("Backend.Models.MainTopic", "MainTopicNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("MainTopic")
                        .HasConstraintName("fk_topic_main");

                    b.HasOne("Backend.Models.User", "User1Navigation")
                        .WithMany("MessageUser1Navigations")
                        .HasForeignKey("User1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_1");

                    b.HasOne("Backend.Models.User", "User2Navigation")
                        .WithMany("MessageUser2Navigations")
                        .HasForeignKey("User2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_2");

                    b.Navigation("MainTopicNavigation");

                    b.Navigation("User1Navigation");

                    b.Navigation("User2Navigation");
                });

            modelBuilder.Entity("Backend.Models.Post", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByUser")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_created_by_user_id");

                    b.HasOne("Backend.Models.UserGroup", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_posts_group_id");

                    b.HasOne("Backend.Models.PrivacySetting", "Privacy")
                        .WithMany("Posts")
                        .HasForeignKey("PrivacyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_posts_privacy_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");

                    b.Navigation("Privacy");
                });

            modelBuilder.Entity("Backend.Models.PostNotification", b =>
                {
                    b.HasOne("Backend.Models.User", "FromUser")
                        .WithMany("PostNotifications")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_notifications_from_user_id");

                    b.HasOne("Backend.Models.Post", "Post")
                        .WithMany("PostNotifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_notifications_post_id");

                    b.HasOne("Backend.Models.TypePostNotification", "Type")
                        .WithMany("PostNotifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_notifications_type");

                    b.Navigation("FromUser");

                    b.Navigation("Post");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Backend.Models.ReactsComment", b =>
                {
                    b.HasOne("Backend.Models.Comment", "Comment")
                        .WithMany("ReactsComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reacts_comment_comment_id");

                    b.HasOne("Backend.Models.User", "User")
                        .WithOne("ReactsComment")
                        .HasForeignKey("Backend.Models.ReactsComment", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_cloud");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.ReactsPost", b =>
                {
                    b.HasOne("Backend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reacts_post_post_id");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reacts_post_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.ReadMessage", b =>
                {
                    b.HasOne("Backend.Models.Message", "Messages")
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .HasConstraintName("read_message_ibfk_2");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("read_message_ibfk_1");

                    b.Navigation("Messages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Relationship", b =>
                {
                    b.HasOne("Backend.Models.User", "FromUser")
                        .WithMany("RelationshipFromUsers")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relationship_from_user_id");

                    b.HasOne("Backend.Models.User", "ToUser")
                        .WithMany("RelationshipToUsers")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relationship_to_user_id");

                    b.HasOne("Backend.Models.TypeRelationship", "TypeRelationshipNavigation")
                        .WithMany("Relationships")
                        .HasForeignKey("TypeRelationship")
                        .HasConstraintName("fk_type_relationship");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");

                    b.Navigation("TypeRelationshipNavigation");
                });

            modelBuilder.Entity("Backend.Models.RequestNotification", b =>
                {
                    b.HasOne("Backend.Models.User", "FromUser")
                        .WithMany("RequestNotificationFromUsers")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_notifications_from_user_id");

                    b.HasOne("Backend.Models.User", "ToUser")
                        .WithMany("RequestNotificationToUsers")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_notifications_to_user_id");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Backend.Models.SharePost", b =>
                {
                    b.HasOne("Backend.Models.Post", "Post")
                        .WithMany("SharePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_share_posts_post_id");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("SharePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_share_posts_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.GenderType", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("fk_gender");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Backend.Models.UserGroup", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedByUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_groups_created_by_user_id");

                    b.HasOne("Backend.Models.PrivacySetting", "Privacy")
                        .WithMany("UserGroups")
                        .HasForeignKey("PrivacyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_groups_privacy_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Privacy");
                });

            modelBuilder.Entity("Backend.Models.UserInGroup", b =>
                {
                    b.HasOne("Backend.Models.UserGroup", "Group")
                        .WithMany("UserInGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_in_group_group_id");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("UserInGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_in_group_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("media_message", b =>
                {
                    b.HasOne("Backend.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("media_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_message");

                    b.HasOne("Backend.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_media");
                });

            modelBuilder.Entity("post_media", b =>
                {
                    b.HasOne("Backend.Models.Media", null)
                        .WithMany()
                        .HasForeignKey("media_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Comment", b =>
                {
                    b.Navigation("InverseChildOfNavigation");

                    b.Navigation("ReactsComments");
                });

            modelBuilder.Entity("Backend.Models.GenderType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.MainTopic", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Backend.Models.Media", b =>
                {
                    b.Navigation("ChatInMessage");
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.Navigation("ChatInMessages");
                });

            modelBuilder.Entity("Backend.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostNotifications");

                    b.Navigation("SharePosts");
                });

            modelBuilder.Entity("Backend.Models.PrivacySetting", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Backend.Models.TypeMedia", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Backend.Models.TypePostNotification", b =>
                {
                    b.Navigation("PostNotifications");
                });

            modelBuilder.Entity("Backend.Models.TypeRelationship", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("ChatInMessages");

                    b.Navigation("Comments");

                    b.Navigation("HistorySearchFromUserNavigations");

                    b.Navigation("HistorySearchOtherUserNavigations");

                    b.Navigation("MessageUser1Navigations");

                    b.Navigation("MessageUser2Navigations");

                    b.Navigation("PostNotifications");

                    b.Navigation("Posts");

                    b.Navigation("ReactsComment");

                    b.Navigation("RelationshipFromUsers");

                    b.Navigation("RelationshipToUsers");

                    b.Navigation("RequestNotificationFromUsers");

                    b.Navigation("RequestNotificationToUsers");

                    b.Navigation("SharePosts");

                    b.Navigation("UserGroups");

                    b.Navigation("UserInGroups");
                });

            modelBuilder.Entity("Backend.Models.UserGroup", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserInGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
